# テストケース

各テストケースは以下の形式で示します。

*   **入力例**: プログラムを実行した際に、あなたが標準入力に入力する内容。
*   **期待される出力**: その入力に対して、プログラムがコンソールに表示するはずの結果。
*   **テストの意図**: なぜこの入力でテストするのか、どのようなケースを検証しているのか。

---

## 各アルゴリズムのテストケース

### 1. 最大値を求めるアルゴリズム

*   **関数**: `find_max_from_input()`

| テストケース | 入力例                 | 期待される出力           | テストの意図                                    |
| :----------- | :--------------------- | :----------------------- | :---------------------------------------------- |
| **TC1-1**    | `3 1 4 1 5 9 2`        | `最大値: 9`              | 正常系: 複数の数値から最大値を正しく検出するか。 |
| **TC1-2**    | `7`                    | `最大値: 7`              | 境界値: リストが1要素の場合。                   |
| **TC1-3**    | `5 4 3 2 1`            | `最大値: 5`              | 境界値: 降順のリストで、最大値が最初の場合。     |
| **TC1-4**    | `1 2 3 4 5`            | `最大値: 5`              | 境界値: 昇順のリストで、最大値が最後の場合。     |
| **TC1-5**    | ` ` (何も入力せずEnter) | `リストが空です。最大値を判断できません。` | 異常系: 空の入力（空リスト）の場合。             |
| **TC1-6**    | `abc`                  | `無効な入力です。数値のみを入力してください。` | 異常系: 数値ではない文字が入力された場合。      |

---

### 2. 最小値を求めるアルゴリズム

*   **関数**: `find_min_from_input()`

| テストケース | 入力例                 | 期待される出力           | テストの意図                                    |
| :----------- | :--------------------- | :----------------------- | :---------------------------------------------- |
| **TC2-1**    | `3 1 4 1 5 9 2`        | `最小値: 1`              | 正常系: 複数の数値から最小値を正しく検出するか。 |
| **TC2-2**    | `7`                    | `最小値: 7`              | 境界値: リストが1要素の場合。                   |
| **TC2-3**    | `5 4 3 2 1`            | `最小値: 1`              | 境界値: 降順のリストで、最小値が最後の場合。     |
| **TC2-4**    | `1 2 3 4 5`            | `最小値: 1`              | 境界値: 昇順のリストで、最小値が最初の場合。     |
| **TC2-5**    | ` ` (何も入力せずEnter) | `リストが空です。最小値を判断できません。` | 異常系: 空の入力（空リスト）の場合。             |
| **TC2-6**    | `xyz`                  | `無効な入力です。数値のみを入力してください。` | 異常系: 数値ではない文字が入力された場合。      |

---

### 3. 線形探索アルゴリズム (Linear Search)

*   **関数**: `linear_search_from_input()`

| テストケース | リスト入力例              | 探す値入力例 | 期待される出力                                     | テストの意図                                            |
| :----------- | :------------------------ | :----------- | :------------------------------------------------- | :------------------------------------------------------ |
| **TC3-1**    | `10 20 30 40 50`          | `30`         | `探す値はインデックス 2 で見つかりました。`        | 正常系: リストの中央に見つかる場合。                    |
| **TC3-2**    | `りんご バナナ みかん`    | `りんご`     | `探す値はインデックス 0 で見つかりました。`        | 正常系: リストの先頭に見つかる場合（文字列）。          |
| **TC3-3**    | `100 200 300`             | `300`        | `探す値はインデックス 2 で見つかりました。`        | 正常系: リストの末尾に見つかる場合。                    |
| **TC3-4**    | `5`                       | `5`          | `探す値はインデックス 0 で見つかりました。`        | 境界値: リストが1要素で、その要素が見つかる場合。       |
| **TC3-5**    | `5`                       | `6`          | `探す値は見つかりませんでした。`                   | 境界値: リストが1要素で、その要素が見つからない場合。   |
| **TC3-6**    | `A B A C`                 | `A`          | `探す値はインデックス 0 で見つかりました。`        | 境界値: 同じ値が複数ある場合、最初に見つかるインデックスを返すか。 |
| **TC3-7**    | `10 20 30`                | `60`         | `探す値は見つかりませんでした。`                   | 異常系: 探す値がリストに存在しない場合。                |
| **TC3-8**    | ` ` (何も入力せずEnter) | `target_value` | `リストが空です。探索できません。`                 | 異常系: リストが空の場合。                              |

---

### 4. 合計を求めるアルゴリズム

*   **関数**: `calculate_sum_from_input()`

| テストケース | 入力例                 | 期待される出力           | テストの意図                                    |
| :----------- | :--------------------- | :----------------------- | :---------------------------------------------- |
| **TC4-1**    | `1 2 3 4 5`            | `合計値: 15`             | 正常系: 正の整数のリストの合計。                |
| **TC4-2**    | `100`                  | `合計値: 100`            | 境界値: リストが1要素の場合。                   |
| **TC4-3**    | `0`                    | `合計値: 0`              | 境界値: 0のみのリスト。                         |
| **TC4-4**    | `-1 0 1`               | `合計値: 0`              | 境界値: 負の数、0、正の数が混在する場合。       |
| **TC4-5**    | ` ` (何も入力せずEnter) | `合計値: 0`              | 異常系: 空の入力（空リスト）の場合（仕様として0を返す）。 |
| **TC4-6**    | `hello`                | `無効な入力です。数値のみを入力してください。` | 異常系: 数値ではない文字が入力された場合。      |

---

### 5. 平均値を求めるアルゴリズム

*   **関数**: `calculate_average_from_input()`

| テストケース | 入力例                 | 期待される出力           | テストの意図                                        |
| :----------- | :--------------------- | :----------------------- | :-------------------------------------------------- |
| **TC5-1**    | `10 20 30 40 50`       | `平均値: 30.0`           | 正常系: 整数平均の場合。                            |
| **TC5-2**    | `1 2 3 4`              | `平均値: 2.5`            | 正常系: 浮動小数点数平均になる場合。                |
| **TC5-3**    | `100`                  | `平均値: 100.0`          | 境界値: リストが1要素の場合。                       |
| **TC5-4**    | `0 0 0`                | `平均値: 0.0`            | 境界値: 全て0の場合。                               |
| **TC5-5**    | ` ` (何も入力せずEnter) | `リストが空です。平均値を計算できません。` | 異常系: 空の入力（空リスト）の場合（ゼロ除算の回避）。 |
| **TC5-6**    | `a b c`                | `無効な入力です。数値のみを入力してください。` | 異常系: 数値ではない文字が入力された場合。          |

---

### 6. 偶数・奇数判別アルゴリズム

*   **関数**: `is_even_or_odd_from_input()`

| テストケース | 入力例                 | 期待される出力         | テストの意図                                    |
| :----------- | :--------------------- | :--------------------- | :---------------------------------------------- |
| **TC6-1**    | `4`                    | `入力された数は 偶数です。` | 正常系: 正の偶数。                              |
| **TC6-2**    | `7`                    | `入力された数は 奇数です。` | 正常系: 正の奇数。                              |
| **TC6-3**    | `0`                    | `入力された数は 偶数です。` | 境界値: 0の場合（通常偶数とみなされる）。       |
| **TC6-4**    | `1`                    | `入力された数は 奇数です。` | 境界値: 1の場合。                               |
| **TC6-5**    | `-2`                   | `入力された数は 偶数です。` | 境界値: 負の偶数。                              |
| **TC6-6**    | `-3`                   | `入力された数は 奇数です。` | 境界値: 負の奇数。                              |
| **TC6-7**    | `hello`                | `無効な入力です。整数のみを入力してください。` | 異常系: 整数ではない文字が入力された場合。      |
| **TC6-8**    | `3.5`                  | `無効な入力です。整数のみを入力してください。` | 異常系: 浮動小数点数が入力された場合。          |

---

### 7. 要素の出現回数を数えるアルゴリズム

*   **関数**: `count_occurrences_from_input()`

| テストケース | リスト入力例                       | 数える要素入力例 | 期待される出力                         | テストの意図                                              |
| :----------- | :--------------------------------- | :--------------- | :------------------------------------- | :-------------------------------------------------------- |
| **TC7-1**    | `りんご バナナ りんご みかん りんご` | `りんご`         | `指定された要素の出現回数: 3`          | 正常系: 複数回出現する文字列。                            |
| **TC7-2**    | `A B C D`                          | `B`              | `指定された要素の出現回数: 1`          | 正常系: 1回だけ出現する文字列。                           |
| **TC7-3**    | `10 20 10 30 10`                   | `10`             | `指定された要素の出現回数: 3`          | 正常系: 複数回出現する数値。                              |
| **TC7-4**    | `単語`                             | `単語`           | `指定された要素の出現回数: 1`          | 境界値: リストが1要素で、その要素が見つかる場合。         |
| **TC7-5**    | `単語`                             | `テスト`         | `指定された要素の出現回数: 0`          | 境界値: リストが1要素で、その要素が見つからない場合。     |
| **TC7-6**    | `りんご バナナ みかん`             | `ぶどう`         | `指定された要素の出現回数: 0`          | 異常系: 数える要素がリストに存在しない場合。              |
| **TC7-7**    | ` ` (何も入力せずEnter)            | `any_target`     | `リストが空です。出現回数を計算できません。` | 異常系: リストが空の場合。                                |

---
